---
- name: Set {{ inventory_hostname }} as the hostname for {{ ansible_nodename }}
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
  when: change_hostname

- name: Add default Administrators
  ansible.builtin.user:
    name: "{{ item.username }}"
    shell: "{{ item.shell | default('/bin/bash') }}"
    groups: "{{ item.groups | default(item.username) }}"
    append: True
    state: present
    generate_ssh_key: yes
    ssh_key_bits: 256
    ssh_key_type: ed25519
    ssh_key_file: .ssh/id_ed25519_ansiblesetup
    update_password: on_create
    password: "{{ 'ChAnGemeNOW' | password_hash('sha512') }}"
  with_items:
    - "{{ administrators }}"
  loop_control:
    label: "{{ item.username }}"
  register: ssh_facts

- name: Configure massupdate alias to fully update a system
  ansible.builtin.lineinfile:
    line: "alias massupdate='apt list --upgradable -a && sudo apt update && sudo apt upgrade -y && sudo apt dist-upgrade -y && sudo apt autoremove -y && sudo apt autoclean -y'"
    path: "/home/{{ admin_user.username }}/.bash_aliases"
    create: yes
    mode: '0644'
    owner: "{{ admin_user.username }}"
    group: "{{ admin_user.username }}"
  with_items:
    - "{{ administrators }}"
  loop_control:
    label: "{{ admin_user.username }}" 
    loop_var: admin_user
  when: ansible_os_family == "Debian"

- name: Configure massupdate alias for root to fully update a system
  ansible.builtin.lineinfile:
    line: "alias massupdate='apt list --upgradable -a && sudo apt update && sudo apt upgrade -y && sudo apt dist-upgrade -y && sudo apt autoremove -y && sudo apt autoclean -y'"
    path: "/root/.bash_aliases"
    create: yes
    mode: '0644'
    owner: "root"
    group: "root"
  when: ansible_os_family == "Debian"

- name: Setup .vimrc
  ansible.builtin.get_url:
    url: https://gist.githubusercontent.com/Macleykun/a551d8b0a05c9a4fe96962ed364ab929/raw/9b15c47816c6916b51126c9bb99595495e365223/.vimrc 
    dest: "/home/{{ admin_vimrc.username }}/.vimrc"
    mode: '0644'
    owner: "{{ admin_vimrc.username }}"
    group: "{{ admin_vimrc.username }}"
  with_items:
    - "{{ administrators }}"
  loop_control:
    label: "{{ admin_vimrc.username }}"
    loop_var: admin_vimrc

- name: Setup .vimrc for root
  ansible.builtin.get_url:
    url: https://gist.githubusercontent.com/Macleykun/a551d8b0a05c9a4fe96962ed364ab929/raw/9b15c47816c6916b51126c9bb99595495e365223/.vimrc 
    dest: "/root/.vimrc"
    mode: '0644'
    owner: "root"
    group: "root"

- name: Create personal authorized_keys folder
  ansible.builtin.lineinfile:
    line: "{{ item.1 }}" # The task looks so confulated because a user can have more pub keys
    dest: "/home/{{ item.0.username }}/.ssh/authorized_keys"
    owner: "{{ item.0.username }}"
    group: "{{ item.0.username }}"
    mode: '0600'
    create: yes
  loop: "{{ administrators | subelements('pub_key', 'skip_missing=True') }}"
  loop_control:
    label: "{{ item.0.username }} {{ item.1 }}"

- name: Set personal ansible keys
  ansible.posix.authorized_key:
    user: "{{ ssh_facts.results[index].name }}"
    state: present
    key: "{{ ssh_facts.results[index].ssh_public_key }}"
  loop: "{{ ssh_facts.results }}"
  loop_control:
    label: "{{ ssh_facts.results[index].name }}"
    index_var: index

- name: Make sure openssh-server is present
  ansible.builtin.package:
    name: 
      - openssh-server
    state: present

- name: Make sure ufw is present
  ansible.builtin.package:
    name:
      - ufw
    state: present
  when: ansible_os_family == "Debian"

- name: Make sure firewalld is present
  ansible.builtin.package:
    name:
      - firewalld
    state: present
  when: ansible_os_family == "RedHat"

- name: Disable password login
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^PasswordAuthentication'
    insertafter: '^#PasswordAuthentication'
    line: PasswordAuthentication no
    state: present
  notify:
    - Reload openssh-server

- name: Disable remote Root login
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin'
    insertafter: '^#PermitRootLogin'
    line: 'PermitRootLogin prohibit-password'
    state: present
  notify:
    - Reload openssh-server

- name: Allow SSH through ufw
  community.general.ufw:
    state: enabled
    rule: allow
    name: OpenSSH
  notify:
    - Restart ufw
  when: ansible_os_family == "Debian"

- name: Allow SSH through firewalld
  ansible.posix.firewalld:
    zone: public
    immediate: true
    permanent: true
    state: enabled
    service: ssh
  notify: Reload firewalld
  when: ansible_os_family == "RedHat"

- name: Allow outgoing traffic
  community.general.ufw:
    state: enabled
    direction: outgoing
    policy: allow
  notify:
    - Restart ufw
  when: ansible_os_family == "Debian"

- name: Deny incoming traffic
  community.general.ufw:
    state: enabled
    direction: incoming
    policy: deny
  notify:
    - Restart ufw
  when: ansible_os_family == "Debian"

- name: Configure apt auto-update
  ansible.builtin.include_tasks:
    file: "tasks/autoupdate.yml"
  when: ansible_os_family == "Debian"

- name: Configure motd
  ansible.builtin.include_tasks:
    file: "tasks/motd.yml"
  tags: test
